@use 'sass:map';
@use "variables" as *;

@mixin mq($breakpoint: tab) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media #{map.get($breakpoints, $breakpoint)} {
      @content;
    }
  }

  @else {
    @media (min-width: #{$breakpoint}px) {
      @content;
    }
  }
}

@function rclamp($min, $max, $minViewport: 375, $maxViewport: 1440) {
  $vwScale: calc(($max - $min) / ($maxViewport - $minViewport)); // vw単位でのスケールを計算
  $baseOffset: $min - $minViewport * $vwScale; // 基準となる最小値からのオフセットを計算
  $minRem: calc($min / 16); // 最小値をremに変換
  $maxRem: calc($max / 16); // 最大値をremに変換
  $baseOffsetRem: calc($baseOffset / 16); // オフセットをremに変換
  $vwScaleRem: $vwScale * 100; // vwスケールを調整
  @return clamp(#{$minRem}rem, #{$baseOffsetRem}rem + #{$vwScaleRem}vw, #{$maxRem}rem);
}

@function rem($pixel) {
  @return calc($pixel / 16) * 1rem;
}

@mixin z-index($key) {
  z-index: map.get($layers, $key);
}

@mixin menuHoverStyle($textColor: $color-font, $hoveredTextColor: $color-accent-dark) {
  color: transparent;
  background: linear-gradient(to right, $hoveredTextColor 50%, $textColor 50%) 100%;
  background-clip: text;
  background-size: 200% 100%;
  transition: background-position 0.35s;

  &:hover {
    @media (any-hover: hover) {
      background-position: 0 100%;
    }
  }

  &:focus-visible {
    background-position: 0 100%;
  }
}